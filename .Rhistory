library("Gviz")
library('GenomicFeatures')
chrom<-"chr8"
chromstart<-10935206
chromend<-11135302
#data(geneModels)
geneDF=read.csv("~/Downloads/human84.csv")
colnames(geneDF) = c("gene","symbol","chromosome","start","end","strand","feature")
geneDF$chromosome = paste0("chr",geneDF$chromosome)
#gr <- GRanges(seqnames = chrom, IRanges(chromstart, chromend), strand = "*")
grtrack <- GeneRegionTrack(geneDF, genome = "hg19",
chromosome = "chr7",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
geneDFSub = subset(geneDF, chromosome == "chr8")
dim(geneDFSub)
dim(geneDF)
geneDFSub = subset(geneDF, chromosome == "chr8")
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr7",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
head(geneDFSub)
head(geneDF)
class(geneDF)
class(geneDFSub)
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
View(geneDFSub)
seq(1,10)
rownames(geneDFSub) = seq(1,nrow(geneDFSub))
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
transcriptAnnotation = "symbol")
class(geneDFSub$gene)
class(geneDF$gene)
class(geneDF$symbol)
class(geneDF$feature)
class(geneDFSub$feature)
geneDFSub$feature = NULL
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
plotTracks(grtrack,from = chromstart, to = chromend)
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=T,
transcriptAnnotation = "symbol")
plotTracks(grtrack,from = chromstart, to = chromend)
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
plotTracks(grtrack,from = chromstart, to = chromend)
chromstart<-10835206
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol")
plotTracks(grtrack,from = chromstart, to = chromend)
grtrack <- GeneRegionTrack(geneDFSub, genome = "hg19",
chromosome = "chr8",start = chromstart, end = chromend,
name = "smallRegions",collapseTranscripts=F,
transcriptAnnotation = "symbol", fill = "black")
plotTracks(grtrack,from = chromstart, to = chromend)
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(enrichGo$go_enrich)
class(enrichGo$go_enrich)
class(as.data.frame(enrichGo$go_enrich))
head(as.data.frame(enrichGo$go_enrich))
shiny::runApp()
shiny::runApp()
go_enrich@result
class(go_enrich@result)
shiny::runApp()
shiny::runApp()
shiny::runApp()
go_enrich@result
go_enrich@result
genes
go_enrich@result
shiny::runApp()
go_enrich@result
go_enrich@result
head(go_enrich)
input$organismDb
input$keytype
go_enrich@result
shiny::runApp()
?dotplot
?barplot
?barplot
shiny::runApp()
shiny::runApp()
?emapplot
??emapplot
?goplot
BiocInstaller::biocLite("enrichplot")
BiocInstaller::biocLite("enrichplot")
install.packages("enrichplot")
devtools::install_github("GuangchuangYu/enrichplot")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cnetplot(go_enrich, categorySize="pvalue", foldChange=myValues$gene_list)
p = cnetplot(go_enrich, categorySize="pvalue", foldChange=myValues$gene_list)
p
class(p)
shiny::runApp()
shiny::runApp()
pdf("~/Downloads/cnetplot.pdf", 7, 5)
cnetplot(go_enrich, categorySize="pvalue", foldChange=myValues$gene_list)
dev.off()
install.packages("DOSE")
install.packages("DOSE")
install.packages("DOSE")
install.packages("DOSE")
BiocInstaller::biocLite("DOSE")
library(DOSE)
shiny::runApp()
BiocInstaller::biocLite("GOplot")
library(GOplot)
shiny::runApp()
?goplot
??goplot
packageVersion("clusterProfiler")
data(EC)
head(EC$david)
class(EC$david)
shiny::runApp()
sessionInfo()
packageVersion("enrichplot")
BiocInstaller::biocLite("enrichplot")
install.packages("enrichplot")
devtools::install_github("GuangchuangYu/enrichplot")
install.packages("gridGraphics")
BiocInstaller::biocLite("gridGraphics")
install.packages("magick")
install.packages("gridGraphics")
BiocInstaller::biocLite("gridGraphics")
devtools::install_github("GuangchuangYu/enrichplot")
install.packages("gridGraphics")
devtools::install_github("pmur002/gridgraphics")
devtools::install_github("GuangchuangYu/enrichplot")
BiocInstaller::biocLite("DOSE")
install.packages("DOSE")
install.packages("DOSE")
install.packages("DOSE")
source("https://bioconductor.org/biocLite.R")
biocLite("DOSE")
install.packages("https://bioconductor.org/packages/release/bioc/bin/macosx/el-capitan/contrib/3.6/DOSE_3.10.0.tgz", repos = NULL, type = "source")
devtools::install_github("GuangchuangYu/DOSE")
library(DOSE)
install.packages("DOSE")
install.packages("DOSE")
install.packages("DOSE")
remove.packages("DOSE")
devtools::install_github("GuangchuangYu/DOSE")
.libPaths()
remove.packages("DOSE")
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="~/Downloads/installed_old.rda")
library(wordcloud)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?wordcloud
shiny::runApp()
wordcloud(words = wcdf$term, freq = wcdf$V1, colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
shiny::runApp()
shiny::runApp()
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(1, 1)), colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(1, 2)), colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(2, 2)), colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(1, 2)), colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(4, 1)), colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
shiny::runApp()
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(2, .5)), colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
wc = wordcloud(words = wcdf$term, freq = wcdf$V1, colors=brewer.pal(8, "Dark2"), max.words = input$maxWords)
install.packages(wordcloud2)
install.packages("wordcloud2")
wordcloud2::wordcloud2()
??wordcloud2::wordcloud2
?wordcloud2::wordcloud2
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(dataDF)
dataDF = dataDF[order(freq),]
dataDF = dataDF[order(dataDF$freq),]
head(dataDF)
dataDF = dataDF[order(-dataDF$freq),]
head(dataDF)
ncol(dataDF)
nrow(dataDF)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
wordsDF
head(wordsDF)
nrow(wordsDF)
nrow()
unique(wordsDF$word)
shiny::runApp()
shiny::runApp()
shiny::runApp()\
shiny::runApp()\
shiny::runApp()\
shiny::runApp()
head(wordsDF)
nrow(wordsDF)
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(wordsDF)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
demoFreq
head(demoFreq)
head(demoFreq,20)
head(demoFreqC)
wordsDF
?wordcloud2
wordsDF$word = c("Neuroactive","MAPK")
shiny::runApp()
test = wordcloud2(wordsDF, color = input$wordsColor,
shape = input$wordShape, size = 0.5)
head(wordsDF)
test = wordcloud2(wordsDF, color = input$wordsColor,
shape = input$wordShape, size = 0.2)
test = wordcloud2(wordsDF, color = input$wordsColor,
shape = input$wordShape, size = 0.1)
test = wordcloud2(wordsDF, color = input$wordsColor,
shape = input$wordShape, size = 0.1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
emapplot(go_enrich)
emapplot(go_enrich)
test = emapplot(go_enrich)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?emapplot
?emapplot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
